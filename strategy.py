# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_strategy')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_strategy')
    _strategy = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_strategy', [dirname(__file__)])
        except ImportError:
            import _strategy
            return _strategy
        try:
            _mod = imp.load_module('_strategy', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _strategy = swig_import_helper()
    del swig_import_helper
else:
    import _strategy
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _strategy.new_intArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _strategy.delete_intArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _strategy.intArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _strategy.intArray___setitem__(self, index, value)

    def cast(self):
        return _strategy.intArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_strategy.intArray_frompointer)
    else:
        frompointer = _strategy.intArray_frompointer
intArray_swigregister = _strategy.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(t):
    return _strategy.intArray_frompointer(t)
intArray_frompointer = _strategy.intArray_frompointer

class int2dArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, int2dArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, int2dArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _strategy.new_int2dArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _strategy.delete_int2dArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _strategy.int2dArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _strategy.int2dArray___setitem__(self, index, value)

    def cast(self):
        return _strategy.int2dArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_strategy.int2dArray_frompointer)
    else:
        frompointer = _strategy.int2dArray_frompointer
int2dArray_swigregister = _strategy.int2dArray_swigregister
int2dArray_swigregister(int2dArray)

def int2dArray_frompointer(t):
    return _strategy.int2dArray_frompointer(t)
int2dArray_frompointer = _strategy.int2dArray_frompointer

class Node(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Node, name)
    __repr__ = _swig_repr
    __swig_setmethods__["parent"] = _strategy.Node_parent_set
    __swig_getmethods__["parent"] = _strategy.Node_parent_get
    if _newclass:
        parent = _swig_property(_strategy.Node_parent_get, _strategy.Node_parent_set)
    __swig_setmethods__["children"] = _strategy.Node_children_set
    __swig_getmethods__["children"] = _strategy.Node_children_get
    if _newclass:
        children = _swig_property(_strategy.Node_children_get, _strategy.Node_children_set)
    __swig_setmethods__["state"] = _strategy.Node_state_set
    __swig_getmethods__["state"] = _strategy.Node_state_get
    if _newclass:
        state = _swig_property(_strategy.Node_state_get, _strategy.Node_state_set)
    __swig_setmethods__["reward"] = _strategy.Node_reward_set
    __swig_getmethods__["reward"] = _strategy.Node_reward_get
    if _newclass:
        reward = _swig_property(_strategy.Node_reward_get, _strategy.Node_reward_set)
    __swig_setmethods__["visited"] = _strategy.Node_visited_set
    __swig_getmethods__["visited"] = _strategy.Node_visited_get
    if _newclass:
        visited = _swig_property(_strategy.Node_visited_get, _strategy.Node_visited_set)
    __swig_setmethods__["action"] = _strategy.Node_action_set
    __swig_getmethods__["action"] = _strategy.Node_action_get
    if _newclass:
        action = _swig_property(_strategy.Node_action_get, _strategy.Node_action_set)
    __swig_setmethods__["mySide"] = _strategy.Node_mySide_set
    __swig_getmethods__["mySide"] = _strategy.Node_mySide_get
    if _newclass:
        mySide = _swig_property(_strategy.Node_mySide_get, _strategy.Node_mySide_set)
    __swig_setmethods__["availableActions"] = _strategy.Node_availableActions_set
    __swig_getmethods__["availableActions"] = _strategy.Node_availableActions_get
    if _newclass:
        availableActions = _swig_property(_strategy.Node_availableActions_get, _strategy.Node_availableActions_set)
    __swig_setmethods__["availableActCnt"] = _strategy.Node_availableActCnt_set
    __swig_getmethods__["availableActCnt"] = _strategy.Node_availableActCnt_get
    if _newclass:
        availableActCnt = _swig_property(_strategy.Node_availableActCnt_get, _strategy.Node_availableActCnt_set)
    __swig_setmethods__["top"] = _strategy.Node_top_set
    __swig_getmethods__["top"] = _strategy.Node_top_get
    if _newclass:
        top = _swig_property(_strategy.Node_top_get, _strategy.Node_top_set)

    def __init__(self, *args):
        this = _strategy.new_Node(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _strategy.delete_Node
    __del__ = lambda self: None
Node_swigregister = _strategy.Node_swigregister
Node_swigregister(Node)
cvar = _strategy.cvar

class UCTStrategy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UCTStrategy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UCTStrategy, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timeout"] = _strategy.UCTStrategy_timeout_set
    __swig_getmethods__["timeout"] = _strategy.UCTStrategy_timeout_get
    if _newclass:
        timeout = _swig_property(_strategy.UCTStrategy_timeout_get, _strategy.UCTStrategy_timeout_set)

    def __init__(self, *args):
        this = _strategy.new_UCTStrategy(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getPoint(self, M, N, top, board, lastX, lastY, noX, noY):
        return _strategy.UCTStrategy_getPoint(self, M, N, top, board, lastX, lastY, noX, noY)

    def getPointFor1DBoard(self, M, N, top, board, lastX, lastY, noX, noY):
        return _strategy.UCTStrategy_getPointFor1DBoard(self, M, N, top, board, lastX, lastY, noX, noY)

    def valid(self):
        return _strategy.UCTStrategy_valid(self)
    __swig_destroy__ = _strategy.delete_UCTStrategy
    __del__ = lambda self: None
UCTStrategy_swigregister = _strategy.UCTStrategy_swigregister
UCTStrategy_swigregister(UCTStrategy)

class Point(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _strategy.Point_x_set
    __swig_getmethods__["x"] = _strategy.Point_x_get
    if _newclass:
        x = _swig_property(_strategy.Point_x_get, _strategy.Point_x_set)
    __swig_setmethods__["y"] = _strategy.Point_y_set
    __swig_getmethods__["y"] = _strategy.Point_y_get
    if _newclass:
        y = _swig_property(_strategy.Point_y_get, _strategy.Point_y_set)

    def __init__(self, x=0, y=0):
        this = _strategy.new_Point(x, y)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _strategy.delete_Point
    __del__ = lambda self: None
Point_swigregister = _strategy.Point_swigregister
Point_swigregister(Point)

# This file is compatible with both classic and new-style classes.


